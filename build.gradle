
buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		classpath 'net.saliman:gradle-cobertura-plugin:2.2.3'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
	}
}

apply plugin: 'groovy'

apply plugin: 'cobertura'
apply plugin: 'codenarc'
apply plugin: 'project-report'
apply plugin: 'org.asciidoctor.convert'

apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'

group = 'com.nagternal'
version = '0.4.0'

repositories {
	mavenCentral()
}

dependencies {
  	compile('org.codehaus.groovy:groovy:2.4.5')
	compile('org.spockframework:spock-core:1.0-groovy-2.4')
	compile('com.github.mifmif:generex:0.0.4')
}

asciidoctor {
    sourceDir 'src/docs'
    attributes 'source-highlighter': 'prettify',
               toc                 : 'left',
               icons               : 'font',
               toclevels           : 3,
               'releaseVersion'    : project.version
}

codenarc {
	configFile = file "${project.projectDir}/config/codenarc/codenarc.groovy"
}

codenarcTest {
	ignoreFailures = true
}

codenarcMain {
	maxPriority3Violations = 20
}

cobertura {
	coverageFormats = ['xml','html']
}

codenarcMain {
	dependsOn 'cobertura'
	dependsOn 'generateCoberturaReport'
}

jar {
	from "${projectDir}/LICENSE.txt"
}

task sourceJar(type: Jar) {
	group 'Build'
	description 'An archive of the source code'
	classifier 'sources'
	from sourceSets.main.allSource
	from "${projectDir}/LICENSE.txt"
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
	classifier = 'javadoc'
	from groovydoc
}

check {
	//dependsOn coberturaCheck
}

build {
	dependsOn sourceJar, javadocJar
}

artifacts {
	archives jar
	archives sourceJar
	archives javadocJar
}

bintray {
	user = project.hasProperty('bintrayUser') ? bintrayUser : ''
	key = project.hasProperty('bintrayApiKey') ? bintrayApiKey : ''

	configurations = ['archives']
	dryRun = false
	publish = true
	pkg {
		repo = 'nagternal'
		name = 'spock-genesis'
		desc =  'Mostly lazy data generators for property based testing using the Spock test framework'
		websiteUrl = 'https://github.com/Bijnagte/spock-genesis'
		issueTrackerUrl = 'https://github.com/Bijnagte/spock-genesis/issues'
		vcsUrl = 'https://github.com/Bijnagte/spock-genesis.git'
		licenses = ['MIT']
		labels = ['spock']
		publicDownloadNumbers = true
	}
}
